- Class: meta
  Course: Regular Expressions
  Lesson: Introduction
  Author: Jon Calder
  Type: Standard
  Organization: N/A
  Version: 2.4.2

- Class: text
  Output: Welcome to this swirl course on the use of Regular Expressions in R. 
    Regular expressions are an extremely powerful tool which allow one to look 
    for and match specific patterns in a string (or string vector). Regular 
    expressions were originally developed for the Perl language and have since 
    been implemented in many other languages including R.
    
- Class: text
  Output: If you are new to swirl, note that you can leave at any point during a 
    lesson by simply hitting escape. Alternatively type info() in the R console 
    to explore the navigation options within swirl and swirl lessons.

- Class: text
  Output: In order for you to have the best learning experience, we suggest 
    that you maximise your R console window - this will allow you to read all 
    the lesson and console output with a minimum amount of scrolling back and 
    forth. If you are using the RStudio IDE (which is highly recommended), it's 
    probably best to keep the script editing pane small or minimized whenever it
    is not needed.

- Class: text
  Output: In this first lesson we will start with a quick introduction to 
    regular expressions by way of a few examples. We'll then provide an overview 
    of the (core) functions in R which leverage regular expressions. Later 
    lessons will dive into the different building blocks that can be used in the 
    construction of regular expressions and seeing how these can be combined to 
    create complex filtering or pattern matching.
    
- Class: text
  Output: Any use of regular expressions involves at least two key parameters. 
    Firstly, the pattern parameter, which defines what type and/or sequence of 
    characters to look for; and secondly the text parameter, which should 
    identify the string content against which to match this pattern. The pattern 
    itself is always provided in the form of a string so will need to be 
    enclosed in (single or double) quotation marks. For example, the pattern 
    "mic" will match the occurrence of the letters "m", "i" and "c" in that 
    exact sequence, regardless of where in the content string they occur and 
    whether or not there are other characters before the "m" or after the "c".

- Class: mult_question
  Output: If we were to use pattern = "mic" with text = "Three blind mice", 
    would there be a match?
  AnswerChoices: Yes;No
  CorrectAnswer: Yes
  AnswerTests: omnitest(correctVal= "Yes")
  Hint: Note that the word mice at the end of the text string starts with the 
    letters "m"-"i"-"c".

- Class: text
  Output: Note furthermore that regular expressions are case sensitive by 
    default (although we'll see later that one can choose to have R ignore case 
    in regular expressions). This means that with pattern = "Mic" and the same 
    text as the above case there would be no match.

- Class: mult_question
  Output: If we were to use pattern = "three" with text = "Three blind mice", 
    would there be a match?
  AnswerChoices: Yes;No
  CorrectAnswer: No
  AnswerTests: omnitest(correctVal= "No")
  Hint: Note the case of the letter "T" in the pattern and in the text.
  
- Class: text
  Output: If we want to match only the very beginning of the text string, we can 
    include a "^" at the beginning of the pattern string. So for example 
    pattern = "^Three" would match the text string 
    "Three blind mice, three blind mice", but pattern = "^three" wouldn't.
    "^" is a so-called metacharacter, which does not have a literal 
    interpretation in a string (such as a single letter like "t"). As you will 
    see in upcoming lessons, metacharacters can be combined together in 
    different ways and are a key building block for regular expressions. For 
    now, let us look at the following question.
    
- Class: mult_question
  Output: What pattern would match "I" exclusively at the beginning of the text 
    string?
  AnswerChoices: pattern = 'I';pattern = 'I^'; pattern = '^I' 
  CorrectAnswer: pattern = '^I'
  AnswerTests: omnitest(correctVal= "pattern = '^I'")
  Hint: The "^" must appear at the start of the pattern.

- Class: mult_question
  Output: Similarly if we want to match only the very end of the text string, we 
    can include the metacharacter "$" at the end of the pattern string. So for 
    example pattern = "mice$" would match the text string 
    "Three blind mice, three blind mice", but not the text string 
    "Did you ever see such a thing in your life, As three blind mice?". What 
    pattern would match "I" exclusively at the end of the text string?
  AnswerChoices: pattern = 'I';pattern = '$I'; pattern = 'I$' 
  CorrectAnswer: pattern = 'I$'
  AnswerTests: omnitest(correctVal= "pattern = 'I$'")
  Hint: The "$" must appear at the end of the pattern.
  
- Class: text
  Output: That concludes our brief introduction to regular expressions. In the 
    next lesson, we're going to cover some of the functions available in base R 
    which allow one to apply regular expressions to string data.

- Class: mult_question
  Output: Are you happy to submit the log of this lesson to the course author 
    via Google Forms? The log indicates which questions were attempted multiple 
    times, skipped or correctly answered. This information will be used to 
    identify problematic questions and make improvements. The data will be 
    automatically populated in encoded form - all you need to do is click 
    'Submit'.
  AnswerChoices: Yes (will take you to the Google Form); No, not willing to help.
  CorrectAnswer: Yes (will take you to the Google Form)
  AnswerTests: submit_log()
  Hint: Any response will be accepted.
