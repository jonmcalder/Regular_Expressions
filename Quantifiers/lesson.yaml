- Class: meta
  Course: Regular Expressions
  Lesson: Quantifiers
  Author: Jon Calder
  Type: Standard
  Organization: N/A
  Version: 2.4.2

- Class: text
  Output: This lesson will focus on the use of quantifiers in regular 
    expressions. Quantifiers are used to indicate characters or collections of 
    characters which may be repeated in the search pattern.
    
- Class: text
  Output: The core perspective for quantifiers is very simple, but there is also
    a more advanced perspective which is important to grasp in order to gain a 
    proper understanding of how quantifiers work. We will focus on the basics 
    for now, and then progress on to the more advanced underpinnings in the 
    latter part of the lesson.
    
- Class: text
  Output: A regex quantifier tells the regex engine to match a certain quantity 
    of the character or subexpression immediately to its left. The "+" 
    quantifier indicates a match of one or more times. For example, the pattern 
    "a+" will match the text strings "apples" and "aaa" since both strings 
    contain at least one "a".
    
- Class: text
  Output: In the case of a pattern such as "abc+abx", the quantifier 
    only applies to the character immediately to it's left (i.e. the "c"), so 
    that this pattern would match "abcccccabx" but not "abcabcabx". By contrast, 
    in the case of a pattern like "(abc)+abx", the quantifier applies to the 
    sub-expression "(abc)" and thus this pattern would match "abcabcabx" but not 
    "abcccccabx".

- Class: mult_question
  Output: Which of the below strings would be matched by the pattern "xyz(abc)+xyz"?
  AnswerChoices: xyzxyz;xyzcxyz;xyzabcabcxyz;xyzabc
  CorrectAnswer: xyzabcabcxyz
  AnswerTests: omnitest(correctVal="xyzabcabcxyz")
  Hint: The quantifier is applied to the expression within parentheses.
  
- Class: mult_question
  Output: The "?" quantifier indicates a match of either 0 or 1 occurrences. For
    example, the pattern "Could be 10? or 20?" would match the strings 
    "Could be 1 or 2" and "Could be 10 or 20". Which other string(s) would 
    also be matched by this pattern?
  AnswerChoices: Could be 10 or 2 and Could be 1 or 20; Could be 100 or 200; Could be  or 
  CorrectAnswer: Could be 10 or 2 and Could be 1 or 20
  AnswerTests: omnitest(correctVal="Could be 10 or 2 and Could be 1 or 20")
  Hint: The "?" quantifier can match either 0 or 1 occurrences of "0" in both 
    positions within the string.
    
- Class: cmd_question
  Output: The "*" quantifier is essentially like the union of "+" and "?" since 
    it is used to match 0 or more occurrences of a character or 
    sub-expression. Using, the "*" quantifier, provide a pattern which will 
    match the strings "xz", "xyz", "xyyz", "xyyyz", and "xyyyyz".
  CorrectAnswer: pattern = "xy*z"
  AnswerTests: omnitest(correctVal="xy*z")
  Hint: Simply provide the pattern string (e.g. "abc+").
  
- Class: text
  Output: In addition to the above three quantifiers, one can also be a little 
    more specific if necessary. A quantifier of the form "(sub){x,y}" indicates 
    between x and y occurrences of the sub-expression (sub). For example, 
    "a{2,4}" will match any string containing "aa", "aaa" or "aaaa".

- Class: text
  Output: A quantifier of the form "(sub){x,}" will match x or more occurrences 
    of the sub-expression (sub) e.g. "a{2,}" will match strings containing "aa", 
    "aaa", "aaaa", "aaaaa" etc.

- Class: text
  Output: A quantifier of the form "(sub){x}" will match exactly x occurrences 
    of the sub-expression (sub). e.g. "a{3}" will match strings containing "aaa".

- Class: mult_question
  Output: What will the output of the following statement be? 
    grepl("ab{3,5}c", c("abc", "abbc","abbbc","abbbbc","abbbbbc","abbbbbbc"))
  AnswerChoices: FALSE FALSE TRUE TRUE TRUE FALSE;
    FALSE TRUE TRUE TRUE TRUE FALSE;
    FALSE FALSE TRUE TRUE TRUE TRUE;
    FALSE FALSE FALSE TRUE FALSE FALSE
  CorrectAnswer: FALSE FALSE TRUE TRUE TRUE FALSE
  AnswerTests: omnitest(correctVal="FALSE FALSE TRUE TRUE TRUE FALSE")
  Hint: The letter "b" should appear between 3 and 5 times.

- Class: text
  Output: When combined with anchors, character classes etc, the above 
    quantifiers provide a lot of power and flexibility. Let's explore a few 
    examples of this by looking at some common regular expressions.
    
- Class: mult_question
  Output: What is represented by the following regular expression - "^\\d+$"
  AnswerChoices: Positive Integer;Negative Number;Positive/Negative Integer
  CorrectAnswer: Positive Integer
  AnswerTests: omnitest(correctVal="Positive Integer")
  Hint: start of string (anchor) - "^", 
    one or more digit characters (character class & quantifier) - "\\d+", 
    end of string (anchor) - "$"

- Class: mult_question
  Output: What is represented by the following regular expression - "^-?\\d+$"
  AnswerChoices: Positive Number;Negative Number;Positive/Negative Integer
  CorrectAnswer: Positive/Negative Integer
  AnswerTests: omnitest(correctVal="Positive/Negative Integer")
  Hint: start of string (anchor) - "^", 
    optional negative sign (character & quantifier) - "-?", 
    one or more digit characters (character class & quantifier) - "\\d+", 
    end of string (anchor) - "$"

- Class: mult_question
  Output: What is represented by the following regular expression - "^-\\d*\\.?\\d+$"
  AnswerChoices: Positive Number;Negative Number;Positive/Negative Number
  CorrectAnswer: Negative Number
  AnswerTests: omnitest(correctVal="Negative Number")
  Hint: start of string (anchor) - "^", negative sign - "-", 
    zero or more digit characters (character class & quantifier) - "\\d*", 
    optional period (escaped special character & quantifier) - "\\.?",
    one or more digit characters  (character class & quantifier) - "\\d+",
    end of string (anchor) - "$"

- Class: mult_question
  Output: Which of the following is the correct regular expression for a 
    username which must be between 3 and 16 characters in length, containing 
    only lower case letters, numbers, dashes and underscores?
  AnswerChoices: ^[a-z0-9_-]{3,16}$;^[a-z0-9]{3,16}$;[a-z0-9_-]{3,16}$;^[a-z0-9_-]{3,16}
  CorrectAnswer: username_regex
  AnswerTests: omnitest(correctVal=username_regex)
  Hint: Note that the username cannot be more than 16 characters and may include
    dashes and underscores.
    
- Class: text
  Output: Having covered the basics of quantifiers, we now move onto a slightly 
    more advanced understanding of how they work. For very simple regular 
    expressions one can get by without this understanding but it becomes 
    essential as you progress in your usage of more complex pattern matches.

- Class: text
  Output: There are actually three different 'classes' of quantifiers based on 
    the underlying pattern evaluation paradigm - greedy quantifiers, lazy 
    (also known as reluctant or non-greedy) quantifiers, and possessive 
    quantifiers.
    
- Class: text
  Output: A greedy quantifier is used by default - so all the previous examples 
    were "greedy" quantifiers. These quantifiers are considered "greedy" because 
    they force the pattern matcher to read in, or eat, the entire input string 
    before attempting the first match. If the first match attempt (the entire 
    input string) fails, the matcher truncates the input string by one character 
    and tries again, repeating the process until a match is found or there are 
    no more characters left to back off from. Depending on the quantifier used 
    in the expression, the last thing it will try matching against is 1 or 0 
    characters. Loosely speaking, a greedy quantifier tries to get the longest 
    match that is possible for the specified input string.

- Class: text
  Output: By contrast a lazy quantifier, takes the opposite approach. 
    Starting at the beginning of the input string, it reluctantly "eats"" one 
    character at a time looking for a match. As soon as a successful match is 
    found, it is returned. If no match is found then the last attempt will 
    eventually be on the entire input string. Loosely speaking, a lazy 
    quantifier tries to get the shortest match that is possible for the 
    specified input string. A quantifier is specified as lazy by appending a "?" 
    to it. e.g. ".*?" is the 'lazy' version of ".*".
    
- Class: text
  Output: A possessive quantifier always "eats"" the entire input string, and 
    only tries once for a match. Unlike a greedy quantifier, a possessive 
    quantifier never backs off in order to look for a shorter match, even if no 
    match is returned for the full input string. A quantifier is specified as 
    possessive by appending a "+" to it e.g. ".*+" is the 'possessive' version 
    of ".*".

- Class: text
  Output: Let's work through an example to illustrate the difference between 
    these three types of quantifier, making use of the input string 
    "xfooxxxxxxfoo".
    
- Class: mult_question
  Output: First the greedy quantifier. What match(es) will be returned when the 
    pattern ".*foo" is applied to the string "xfooxxxxxxfoo"?
  AnswerChoices: xfooxxxxxxfoo at index 0-13;xfoo at index 0-4 and xxxxxxfoo at index 4-13;No match found
  CorrectAnswer: xfooxxxxxxfoo at index 0-13
  AnswerTests: omnitest(correctVal="xfooxxxxxxfoo at index 0-13")
  Hint: In this case the greedy quantifier results in one long match.

- Class: text
  Output: The first example uses the greedy quantifier .* to find "anything", 
    zero or more times, followed by the letters "f" "o" "o". Because the 
    quantifier is greedy, the .* portion of the expression first eats the entire 
    input string. At this point, the overall expression cannot succeed, because 
    the last three letters ("f" "o" "o") have already been consumed. So the 
    matcher slowly backs off one letter at a time until the rightmost occurrence 
    of "foo" has been regurgitated, at which point the match succeeds and the 
    search ends.

- Class: mult_question
  Output: Next the lazy quantifier. What match(es) will be returned when the 
    pattern ".*?foo" is applied to the string "xfooxxxxxxfoo"?
  AnswerChoices: xfooxxxxxxfoo at index 0-13;xfoo at index 0-4 and xxxxxxfoo at index 4-13;No match found
  CorrectAnswer: xfoo at index 0-4 and xxxxxxfoo at index 4-13
  AnswerTests: omnitest(correctVal="xfoo at index 0-4 and xxxxxxfoo at index 4-13")
  Hint: In this case the lazy quantifier results in two shorter matches.
  
- Class: text
  Output: Since the quantifier is lazy, it starts by first consuming "nothing". 
    Because "foo" doesn't appear at the beginning of the string, it's forced to 
    swallow the first letter (an "x"), which triggers the first match between 
    index 0 and 4. Following the same process starting from different positions 
    within the input string yields another match from index 4 to 13 (note that 
    in general only the first match will be returned - but in some cases a regex 
    pattern can be applied to find multiple matches if present).
  
- Class: mult_question
  Output: And lastly the possessive quantifier. What match(es) will be returned 
    when the pattern ".*+foo" is applied to the string "xfooxxxxxxfoo"?
  AnswerChoices: xfooxxxxxxfoo at index 0-13;xfoo at index 0-4 and xxxxxxfoo at index 4-13;No match found
  CorrectAnswer: No match found
  AnswerTests: omnitest(correctVal="No match found")
  Hint: In this case the possessive quantifier results in no match.

- Class: text
  Output: In this last example no match is found because the quantifier is 
    possessive. The entire input string is consumed by ".*+", which leaves 
    nothing left over to satisfy the "foo" at the end of the expression. 
    Note that in practice a possessive quantifier is much faster than a greedy 
    quantifier since it doesn't 'backtrack' to check for matches.

- Class: mult_question
  Output: Are you happy to submit the log of this lesson to the course author 
    via Google Forms? The log indicates which questions were attempted multiple 
    times, skipped or correctly answered. This information will be used to 
    identify problematic questions and make improvements. The data will be 
    automatically populated in encoded form - all you need to do is click 
    'Submit'.
  AnswerChoices: Yes (will take you to the Google Form); No, not willing to help.
  CorrectAnswer: Yes (will take you to the Google Form)
  AnswerTests: submit_log()
  Hint: Any response will be accepted.
